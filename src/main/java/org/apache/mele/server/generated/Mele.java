/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.mele.server.generated;

import org.apache.mele.thirdparty.thrift_0_9_0.scheme.IScheme;
import org.apache.mele.thirdparty.thrift_0_9_0.scheme.SchemeFactory;
import org.apache.mele.thirdparty.thrift_0_9_0.scheme.StandardScheme;

import org.apache.mele.thirdparty.thrift_0_9_0.scheme.TupleScheme;
import org.apache.mele.thirdparty.thrift_0_9_0.protocol.TTupleProtocol;
import org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolException;
import org.apache.mele.thirdparty.thrift_0_9_0.EncodingUtils;
import org.apache.mele.thirdparty.thrift_0_9_0.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

public class Mele {

  public interface Iface {

    public void enqueue(List<ByteBuffer> messages) throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException;

    public List<Message> dequeue(int max) throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException;

    public void ack(List<ByteBuffer> ids) throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException;

    public void createQueue(String name) throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException;

    public void removeQueue(String name) throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException;

    public List<String> queueList() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException;

  }

  public interface AsyncIface {

    public void enqueue(List<ByteBuffer> messages, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.enqueue_call> resultHandler) throws org.apache.mele.thirdparty.thrift_0_9_0.TException;

    public void dequeue(int max, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.dequeue_call> resultHandler) throws org.apache.mele.thirdparty.thrift_0_9_0.TException;

    public void ack(List<ByteBuffer> ids, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.ack_call> resultHandler) throws org.apache.mele.thirdparty.thrift_0_9_0.TException;

    public void createQueue(String name, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.createQueue_call> resultHandler) throws org.apache.mele.thirdparty.thrift_0_9_0.TException;

    public void removeQueue(String name, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.removeQueue_call> resultHandler) throws org.apache.mele.thirdparty.thrift_0_9_0.TException;

    public void queueList(org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<AsyncClient.queueList_call> resultHandler) throws org.apache.mele.thirdparty.thrift_0_9_0.TException;

  }

  public static class Client extends org.apache.mele.thirdparty.thrift_0_9_0.TServiceClient implements Iface {
    public static class Factory implements org.apache.mele.thirdparty.thrift_0_9_0.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void enqueue(List<ByteBuffer> messages) throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      send_enqueue(messages);
      recv_enqueue();
    }

    public void send_enqueue(List<ByteBuffer> messages) throws org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      enqueue_args args = new enqueue_args();
      args.setMessages(messages);
      sendBase("enqueue", args);
    }

    public void recv_enqueue() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      enqueue_result result = new enqueue_result();
      receiveBase(result, "enqueue");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public List<Message> dequeue(int max) throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      send_dequeue(max);
      return recv_dequeue();
    }

    public void send_dequeue(int max) throws org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      dequeue_args args = new dequeue_args();
      args.setMax(max);
      sendBase("dequeue", args);
    }

    public List<Message> recv_dequeue() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      dequeue_result result = new dequeue_result();
      receiveBase(result, "dequeue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.mele.thirdparty.thrift_0_9_0.TApplicationException(org.apache.mele.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "dequeue failed: unknown result");
    }

    public void ack(List<ByteBuffer> ids) throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      send_ack(ids);
      recv_ack();
    }

    public void send_ack(List<ByteBuffer> ids) throws org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      ack_args args = new ack_args();
      args.setIds(ids);
      sendBase("ack", args);
    }

    public void recv_ack() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      ack_result result = new ack_result();
      receiveBase(result, "ack");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void createQueue(String name) throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      send_createQueue(name);
      recv_createQueue();
    }

    public void send_createQueue(String name) throws org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      createQueue_args args = new createQueue_args();
      args.setName(name);
      sendBase("createQueue", args);
    }

    public void recv_createQueue() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      createQueue_result result = new createQueue_result();
      receiveBase(result, "createQueue");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void removeQueue(String name) throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      send_removeQueue(name);
      recv_removeQueue();
    }

    public void send_removeQueue(String name) throws org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      removeQueue_args args = new removeQueue_args();
      args.setName(name);
      sendBase("removeQueue", args);
    }

    public void recv_removeQueue() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      removeQueue_result result = new removeQueue_result();
      receiveBase(result, "removeQueue");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public List<String> queueList() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      send_queueList();
      return recv_queueList();
    }

    public void send_queueList() throws org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      queueList_args args = new queueList_args();
      sendBase("queueList", args);
    }

    public List<String> recv_queueList() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException
    {
      queueList_result result = new queueList_result();
      receiveBase(result, "queueList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.mele.thirdparty.thrift_0_9_0.TApplicationException(org.apache.mele.thirdparty.thrift_0_9_0.TApplicationException.MISSING_RESULT, "queueList failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncClientManager clientManager;
      private org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncClientManager clientManager, org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.mele.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncClientManager clientManager, org.apache.mele.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void enqueue(List<ByteBuffer> messages, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<enqueue_call> resultHandler) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      checkReady();
      enqueue_call method_call = new enqueue_call(messages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enqueue_call extends org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private List<ByteBuffer> messages;
      public enqueue_call(List<ByteBuffer> messages, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<enqueue_call> resultHandler, org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.mele.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messages = messages;
      }

      public void write_args(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TMessage("enqueue", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        enqueue_args args = new enqueue_args();
        args.setMessages(messages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.mele.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.mele.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_enqueue();
      }
    }

    public void dequeue(int max, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<dequeue_call> resultHandler) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      checkReady();
      dequeue_call method_call = new dequeue_call(max, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dequeue_call extends org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private int max;
      public dequeue_call(int max, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<dequeue_call> resultHandler, org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.mele.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.max = max;
      }

      public void write_args(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TMessage("dequeue", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        dequeue_args args = new dequeue_args();
        args.setMax(max);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Message> getResult() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.mele.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.mele.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dequeue();
      }
    }

    public void ack(List<ByteBuffer> ids, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<ack_call> resultHandler) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      checkReady();
      ack_call method_call = new ack_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ack_call extends org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private List<ByteBuffer> ids;
      public ack_call(List<ByteBuffer> ids, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<ack_call> resultHandler, org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.mele.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TMessage("ack", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        ack_args args = new ack_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.mele.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.mele.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ack();
      }
    }

    public void createQueue(String name, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<createQueue_call> resultHandler) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      checkReady();
      createQueue_call method_call = new createQueue_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createQueue_call extends org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String name;
      public createQueue_call(String name, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<createQueue_call> resultHandler, org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.mele.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TMessage("createQueue", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        createQueue_args args = new createQueue_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.mele.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.mele.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createQueue();
      }
    }

    public void removeQueue(String name, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<removeQueue_call> resultHandler) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      checkReady();
      removeQueue_call method_call = new removeQueue_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeQueue_call extends org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      private String name;
      public removeQueue_call(String name, org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<removeQueue_call> resultHandler, org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.mele.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TMessage("removeQueue", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        removeQueue_args args = new removeQueue_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.mele.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.mele.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeQueue();
      }
    }

    public void queueList(org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<queueList_call> resultHandler) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      checkReady();
      queueList_call method_call = new queueList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queueList_call extends org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncMethodCall {
      public queueList_call(org.apache.mele.thirdparty.thrift_0_9_0.async.AsyncMethodCallback<queueList_call> resultHandler, org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncClient client, org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolFactory protocolFactory, org.apache.mele.thirdparty.thrift_0_9_0.transport.TNonblockingTransport transport) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        prot.writeMessageBegin(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TMessage("queueList", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TMessageType.CALL, 0));
        queueList_args args = new queueList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws MeleError, org.apache.mele.thirdparty.thrift_0_9_0.TException {
        if (getState() != org.apache.mele.thirdparty.thrift_0_9_0.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.mele.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport memoryTransport = new org.apache.mele.thirdparty.thrift_0_9_0.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queueList();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.mele.thirdparty.thrift_0_9_0.TBaseProcessor<I> implements org.apache.mele.thirdparty.thrift_0_9_0.TProcessor {
    //private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.mele.thirdparty.thrift_0_9_0.ProcessFunction<I, ? extends org.apache.mele.thirdparty.thrift_0_9_0.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.mele.thirdparty.thrift_0_9_0.ProcessFunction<I, ? extends  org.apache.mele.thirdparty.thrift_0_9_0.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.mele.thirdparty.thrift_0_9_0.ProcessFunction<I, ? extends  org.apache.mele.thirdparty.thrift_0_9_0.TBase>> getProcessMap(Map<String,  org.apache.mele.thirdparty.thrift_0_9_0.ProcessFunction<I, ? extends  org.apache.mele.thirdparty.thrift_0_9_0.TBase>> processMap) {
      processMap.put("enqueue", new enqueue());
      processMap.put("dequeue", new dequeue());
      processMap.put("ack", new ack());
      processMap.put("createQueue", new createQueue());
      processMap.put("removeQueue", new removeQueue());
      processMap.put("queueList", new queueList());
      return processMap;
    }

    public static class enqueue<I extends Iface> extends org.apache.mele.thirdparty.thrift_0_9_0.ProcessFunction<I, enqueue_args> {
      public enqueue() {
        super("enqueue");
      }

      public enqueue_args getEmptyArgsInstance() {
        return new enqueue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public enqueue_result getResult(I iface, enqueue_args args) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        enqueue_result result = new enqueue_result();
        try {
          iface.enqueue(args.messages);
        } catch (MeleError ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class dequeue<I extends Iface> extends org.apache.mele.thirdparty.thrift_0_9_0.ProcessFunction<I, dequeue_args> {
      public dequeue() {
        super("dequeue");
      }

      public dequeue_args getEmptyArgsInstance() {
        return new dequeue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dequeue_result getResult(I iface, dequeue_args args) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        dequeue_result result = new dequeue_result();
        try {
          result.success = iface.dequeue(args.max);
        } catch (MeleError ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class ack<I extends Iface> extends org.apache.mele.thirdparty.thrift_0_9_0.ProcessFunction<I, ack_args> {
      public ack() {
        super("ack");
      }

      public ack_args getEmptyArgsInstance() {
        return new ack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ack_result getResult(I iface, ack_args args) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        ack_result result = new ack_result();
        try {
          iface.ack(args.ids);
        } catch (MeleError ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class createQueue<I extends Iface> extends org.apache.mele.thirdparty.thrift_0_9_0.ProcessFunction<I, createQueue_args> {
      public createQueue() {
        super("createQueue");
      }

      public createQueue_args getEmptyArgsInstance() {
        return new createQueue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createQueue_result getResult(I iface, createQueue_args args) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        createQueue_result result = new createQueue_result();
        try {
          iface.createQueue(args.name);
        } catch (MeleError ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class removeQueue<I extends Iface> extends org.apache.mele.thirdparty.thrift_0_9_0.ProcessFunction<I, removeQueue_args> {
      public removeQueue() {
        super("removeQueue");
      }

      public removeQueue_args getEmptyArgsInstance() {
        return new removeQueue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeQueue_result getResult(I iface, removeQueue_args args) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        removeQueue_result result = new removeQueue_result();
        try {
          iface.removeQueue(args.name);
        } catch (MeleError ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class queueList<I extends Iface> extends org.apache.mele.thirdparty.thrift_0_9_0.ProcessFunction<I, queueList_args> {
      public queueList() {
        super("queueList");
      }

      public queueList_args getEmptyArgsInstance() {
        return new queueList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queueList_result getResult(I iface, queueList_args args) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        queueList_result result = new queueList_result();
        try {
          result.success = iface.queueList();
        } catch (MeleError ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class enqueue_args implements org.apache.mele.thirdparty.thrift_0_9_0.TBase<enqueue_args, enqueue_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct("enqueue_args");

    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField MESSAGES_FIELD_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField("messages", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enqueue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enqueue_argsTupleSchemeFactory());
    }

    public List<ByteBuffer> messages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.mele.thirdparty.thrift_0_9_0.TFieldIdEnum {
      MESSAGES((short)1, "messages");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGES
            return MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGES, new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("messages", org.apache.mele.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING              , true))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(enqueue_args.class, metaDataMap);
    }

    public enqueue_args() {
    }

    public enqueue_args(
      List<ByteBuffer> messages)
    {
      this();
      this.messages = messages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enqueue_args(enqueue_args other) {
      if (other.isSetMessages()) {
        List<ByteBuffer> __this__messages = new ArrayList<ByteBuffer>();
        for (ByteBuffer other_element : other.messages) {
          ByteBuffer temp_binary_element = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.copyBinary(other_element);
;
          __this__messages.add(temp_binary_element);
        }
        this.messages = __this__messages;
      }
    }

    public enqueue_args deepCopy() {
      return new enqueue_args(this);
    }

    @Override
    public void clear() {
      this.messages = null;
    }

    public int getMessagesSize() {
      return (this.messages == null) ? 0 : this.messages.size();
    }

    public java.util.Iterator<ByteBuffer> getMessagesIterator() {
      return (this.messages == null) ? null : this.messages.iterator();
    }

    public void addToMessages(ByteBuffer elem) {
      if (this.messages == null) {
        this.messages = new ArrayList<ByteBuffer>();
      }
      this.messages.add(elem);
    }

    public List<ByteBuffer> getMessages() {
      return this.messages;
    }

    public enqueue_args setMessages(List<ByteBuffer> messages) {
      this.messages = messages;
      return this;
    }

    public void unsetMessages() {
      this.messages = null;
    }

    /** Returns true if field messages is set (has been assigned a value) and false otherwise */
    public boolean isSetMessages() {
      return this.messages != null;
    }

    public void setMessagesIsSet(boolean value) {
      if (!value) {
        this.messages = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGES:
        if (value == null) {
          unsetMessages();
        } else {
          setMessages((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGES:
        return getMessages();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGES:
        return isSetMessages();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enqueue_args)
        return this.equals((enqueue_args)that);
      return false;
    }

    public boolean equals(enqueue_args that) {
      if (that == null)
        return false;

      boolean this_present_messages = true && this.isSetMessages();
      boolean that_present_messages = true && that.isSetMessages();
      if (this_present_messages || that_present_messages) {
        if (!(this_present_messages && that_present_messages))
          return false;
        if (!this.messages.equals(that.messages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(enqueue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      enqueue_args typedOther = (enqueue_args)other;

      lastComparison = Boolean.valueOf(isSetMessages()).compareTo(typedOther.isSetMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessages()) {
        lastComparison = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.messages, typedOther.messages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enqueue_args(");
      boolean first = true;

      sb.append("messages:");
      if (this.messages == null) {
        sb.append("null");
      } else {
        sb.append(this.messages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enqueue_argsStandardSchemeFactory implements SchemeFactory {
      public enqueue_argsStandardScheme getScheme() {
        return new enqueue_argsStandardScheme();
      }
    }

    private static class enqueue_argsStandardScheme extends StandardScheme<enqueue_args> {

      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, enqueue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGES
              if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList _list8 = iprot.readListBegin();
                  struct.messages = new ArrayList<ByteBuffer>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    ByteBuffer _elem10; // required
                    _elem10 = iprot.readBinary();
                    struct.messages.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setMessagesIsSet(true);
              } else { 
                org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, enqueue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.messages != null) {
          oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.messages.size()));
            for (ByteBuffer _iter11 : struct.messages)
            {
              oprot.writeBinary(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enqueue_argsTupleSchemeFactory implements SchemeFactory {
      public enqueue_argsTupleScheme getScheme() {
        return new enqueue_argsTupleScheme();
      }
    }

    private static class enqueue_argsTupleScheme extends TupleScheme<enqueue_args> {

      @Override
      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enqueue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessages()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessages()) {
          {
            oprot.writeI32(struct.messages.size());
            for (ByteBuffer _iter12 : struct.messages)
            {
              oprot.writeBinary(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enqueue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList _list13 = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.messages = new ArrayList<ByteBuffer>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              ByteBuffer _elem15; // required
              _elem15 = iprot.readBinary();
              struct.messages.add(_elem15);
            }
          }
          struct.setMessagesIsSet(true);
        }
      }
    }

  }

  public static class enqueue_result implements org.apache.mele.thirdparty.thrift_0_9_0.TBase<enqueue_result, enqueue_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct("enqueue_result");

    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new enqueue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new enqueue_resultTupleSchemeFactory());
    }

    public MeleError ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.mele.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.mele.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(enqueue_result.class, metaDataMap);
    }

    public enqueue_result() {
    }

    public enqueue_result(
      MeleError ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enqueue_result(enqueue_result other) {
      if (other.isSetEx()) {
        this.ex = new MeleError(other.ex);
      }
    }

    public enqueue_result deepCopy() {
      return new enqueue_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public MeleError getEx() {
      return this.ex;
    }

    public enqueue_result setEx(MeleError ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((MeleError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof enqueue_result)
        return this.equals((enqueue_result)that);
      return false;
    }

    public boolean equals(enqueue_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(enqueue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      enqueue_result typedOther = (enqueue_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("enqueue_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enqueue_resultStandardSchemeFactory implements SchemeFactory {
      public enqueue_resultStandardScheme getScheme() {
        return new enqueue_resultStandardScheme();
      }
    }

    private static class enqueue_resultStandardScheme extends StandardScheme<enqueue_result> {

      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, enqueue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new MeleError();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, enqueue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enqueue_resultTupleSchemeFactory implements SchemeFactory {
      public enqueue_resultTupleScheme getScheme() {
        return new enqueue_resultTupleScheme();
      }
    }

    private static class enqueue_resultTupleScheme extends TupleScheme<enqueue_result> {

      @Override
      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enqueue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, enqueue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new MeleError();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class dequeue_args implements org.apache.mele.thirdparty.thrift_0_9_0.TBase<dequeue_args, dequeue_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct("dequeue_args");

    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField MAX_FIELD_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField("max", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dequeue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dequeue_argsTupleSchemeFactory());
    }

    public int max; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.mele.thirdparty.thrift_0_9_0.TFieldIdEnum {
      MAX((short)1, "max");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAX
            return MAX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MAX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAX, new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("max", org.apache.mele.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(dequeue_args.class, metaDataMap);
    }

    public dequeue_args() {
    }

    public dequeue_args(
      int max)
    {
      this();
      this.max = max;
      setMaxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dequeue_args(dequeue_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.max = other.max;
    }

    public dequeue_args deepCopy() {
      return new dequeue_args(this);
    }

    @Override
    public void clear() {
      setMaxIsSet(false);
      this.max = 0;
    }

    public int getMax() {
      return this.max;
    }

    public dequeue_args setMax(int max) {
      this.max = max;
      setMaxIsSet(true);
      return this;
    }

    public void unsetMax() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
    }

    /** Returns true if field max is set (has been assigned a value) and false otherwise */
    public boolean isSetMax() {
      return EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
    }

    public void setMaxIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAX:
        if (value == null) {
          unsetMax();
        } else {
          setMax((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAX:
        return Integer.valueOf(getMax());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAX:
        return isSetMax();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dequeue_args)
        return this.equals((dequeue_args)that);
      return false;
    }

    public boolean equals(dequeue_args that) {
      if (that == null)
        return false;

      boolean this_present_max = true;
      boolean that_present_max = true;
      if (this_present_max || that_present_max) {
        if (!(this_present_max && that_present_max))
          return false;
        if (this.max != that.max)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dequeue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dequeue_args typedOther = (dequeue_args)other;

      lastComparison = Boolean.valueOf(isSetMax()).compareTo(typedOther.isSetMax());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMax()) {
        lastComparison = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.max, typedOther.max);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dequeue_args(");
      boolean first = true;

      sb.append("max:");
      sb.append(this.max);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dequeue_argsStandardSchemeFactory implements SchemeFactory {
      public dequeue_argsStandardScheme getScheme() {
        return new dequeue_argsStandardScheme();
      }
    }

    private static class dequeue_argsStandardScheme extends StandardScheme<dequeue_args> {

      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, dequeue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAX
              if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.I32) {
                struct.max = iprot.readI32();
                struct.setMaxIsSet(true);
              } else { 
                org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, dequeue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MAX_FIELD_DESC);
        oprot.writeI32(struct.max);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dequeue_argsTupleSchemeFactory implements SchemeFactory {
      public dequeue_argsTupleScheme getScheme() {
        return new dequeue_argsTupleScheme();
      }
    }

    private static class dequeue_argsTupleScheme extends TupleScheme<dequeue_args> {

      @Override
      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, dequeue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMax()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMax()) {
          oprot.writeI32(struct.max);
        }
      }

      @Override
      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, dequeue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.max = iprot.readI32();
          struct.setMaxIsSet(true);
        }
      }
    }

  }

  public static class dequeue_result implements org.apache.mele.thirdparty.thrift_0_9_0.TBase<dequeue_result, dequeue_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct("dequeue_result");

    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)0);
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dequeue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dequeue_resultTupleSchemeFactory());
    }

    public List<Message> success; // required
    public MeleError ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.mele.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.mele.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.StructMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, Message.class))));
      tmpMap.put(_Fields.EX, new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.mele.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(dequeue_result.class, metaDataMap);
    }

    public dequeue_result() {
    }

    public dequeue_result(
      List<Message> success,
      MeleError ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dequeue_result(dequeue_result other) {
      if (other.isSetSuccess()) {
        List<Message> __this__success = new ArrayList<Message>();
        for (Message other_element : other.success) {
          __this__success.add(new Message(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new MeleError(other.ex);
      }
    }

    public dequeue_result deepCopy() {
      return new dequeue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Message> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Message elem) {
      if (this.success == null) {
        this.success = new ArrayList<Message>();
      }
      this.success.add(elem);
    }

    public List<Message> getSuccess() {
      return this.success;
    }

    public dequeue_result setSuccess(List<Message> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MeleError getEx() {
      return this.ex;
    }

    public dequeue_result setEx(MeleError ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Message>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((MeleError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dequeue_result)
        return this.equals((dequeue_result)that);
      return false;
    }

    public boolean equals(dequeue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dequeue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dequeue_result typedOther = (dequeue_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dequeue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dequeue_resultStandardSchemeFactory implements SchemeFactory {
      public dequeue_resultStandardScheme getScheme() {
        return new dequeue_resultStandardScheme();
      }
    }

    private static class dequeue_resultStandardScheme extends StandardScheme<dequeue_result> {

      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, dequeue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Message>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    Message _elem18; // required
                    _elem18 = new Message();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new MeleError();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, dequeue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, struct.success.size()));
            for (Message _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dequeue_resultTupleSchemeFactory implements SchemeFactory {
      public dequeue_resultTupleScheme getScheme() {
        return new dequeue_resultTupleScheme();
      }
    }

    private static class dequeue_resultTupleScheme extends TupleScheme<dequeue_result> {

      @Override
      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, dequeue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Message _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, dequeue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList _list21 = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Message>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              Message _elem23; // required
              _elem23 = new Message();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new MeleError();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class ack_args implements org.apache.mele.thirdparty.thrift_0_9_0.TBase<ack_args, ack_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct("ack_args");

    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField IDS_FIELD_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField("ids", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ack_argsTupleSchemeFactory());
    }

    public List<ByteBuffer> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.mele.thirdparty.thrift_0_9_0.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ids", org.apache.mele.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING              , true))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(ack_args.class, metaDataMap);
    }

    public ack_args() {
    }

    public ack_args(
      List<ByteBuffer> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ack_args(ack_args other) {
      if (other.isSetIds()) {
        List<ByteBuffer> __this__ids = new ArrayList<ByteBuffer>();
        for (ByteBuffer other_element : other.ids) {
          ByteBuffer temp_binary_element = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.copyBinary(other_element);
;
          __this__ids.add(temp_binary_element);
        }
        this.ids = __this__ids;
      }
    }

    public ack_args deepCopy() {
      return new ack_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<ByteBuffer> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(ByteBuffer elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<ByteBuffer>();
      }
      this.ids.add(elem);
    }

    public List<ByteBuffer> getIds() {
      return this.ids;
    }

    public ack_args setIds(List<ByteBuffer> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ack_args)
        return this.equals((ack_args)that);
      return false;
    }

    public boolean equals(ack_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ack_args typedOther = (ack_args)other;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(typedOther.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ids, typedOther.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ack_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ack_argsStandardSchemeFactory implements SchemeFactory {
      public ack_argsStandardScheme getScheme() {
        return new ack_argsStandardScheme();
      }
    }

    private static class ack_argsStandardScheme extends StandardScheme<ack_args> {

      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, ack_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList _list24 = iprot.readListBegin();
                  struct.ids = new ArrayList<ByteBuffer>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    ByteBuffer _elem26; // required
                    _elem26 = iprot.readBinary();
                    struct.ids.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, ack_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.ids.size()));
            for (ByteBuffer _iter27 : struct.ids)
            {
              oprot.writeBinary(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ack_argsTupleSchemeFactory implements SchemeFactory {
      public ack_argsTupleScheme getScheme() {
        return new ack_argsTupleScheme();
      }
    }

    private static class ack_argsTupleScheme extends TupleScheme<ack_args> {

      @Override
      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, ack_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (ByteBuffer _iter28 : struct.ids)
            {
              oprot.writeBinary(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, ack_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList _list29 = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.ids = new ArrayList<ByteBuffer>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              ByteBuffer _elem31; // required
              _elem31 = iprot.readBinary();
              struct.ids.add(_elem31);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class ack_result implements org.apache.mele.thirdparty.thrift_0_9_0.TBase<ack_result, ack_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct("ack_result");

    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ack_resultTupleSchemeFactory());
    }

    public MeleError ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.mele.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.mele.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(ack_result.class, metaDataMap);
    }

    public ack_result() {
    }

    public ack_result(
      MeleError ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ack_result(ack_result other) {
      if (other.isSetEx()) {
        this.ex = new MeleError(other.ex);
      }
    }

    public ack_result deepCopy() {
      return new ack_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public MeleError getEx() {
      return this.ex;
    }

    public ack_result setEx(MeleError ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((MeleError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ack_result)
        return this.equals((ack_result)that);
      return false;
    }

    public boolean equals(ack_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ack_result typedOther = (ack_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ack_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ack_resultStandardSchemeFactory implements SchemeFactory {
      public ack_resultStandardScheme getScheme() {
        return new ack_resultStandardScheme();
      }
    }

    private static class ack_resultStandardScheme extends StandardScheme<ack_result> {

      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, ack_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new MeleError();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, ack_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ack_resultTupleSchemeFactory implements SchemeFactory {
      public ack_resultTupleScheme getScheme() {
        return new ack_resultTupleScheme();
      }
    }

    private static class ack_resultTupleScheme extends TupleScheme<ack_result> {

      @Override
      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, ack_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, ack_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new MeleError();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class createQueue_args implements org.apache.mele.thirdparty.thrift_0_9_0.TBase<createQueue_args, createQueue_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct("createQueue_args");

    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField NAME_FIELD_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField("name", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createQueue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createQueue_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.mele.thirdparty.thrift_0_9_0.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("name", org.apache.mele.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(createQueue_args.class, metaDataMap);
    }

    public createQueue_args() {
    }

    public createQueue_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createQueue_args(createQueue_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public createQueue_args deepCopy() {
      return new createQueue_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public createQueue_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createQueue_args)
        return this.equals((createQueue_args)that);
      return false;
    }

    public boolean equals(createQueue_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createQueue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createQueue_args typedOther = (createQueue_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createQueue_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createQueue_argsStandardSchemeFactory implements SchemeFactory {
      public createQueue_argsStandardScheme getScheme() {
        return new createQueue_argsStandardScheme();
      }
    }

    private static class createQueue_argsStandardScheme extends StandardScheme<createQueue_args> {

      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, createQueue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, createQueue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createQueue_argsTupleSchemeFactory implements SchemeFactory {
      public createQueue_argsTupleScheme getScheme() {
        return new createQueue_argsTupleScheme();
      }
    }

    private static class createQueue_argsTupleScheme extends TupleScheme<createQueue_args> {

      @Override
      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, createQueue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, createQueue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class createQueue_result implements org.apache.mele.thirdparty.thrift_0_9_0.TBase<createQueue_result, createQueue_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct("createQueue_result");

    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createQueue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createQueue_resultTupleSchemeFactory());
    }

    public MeleError ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.mele.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.mele.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(createQueue_result.class, metaDataMap);
    }

    public createQueue_result() {
    }

    public createQueue_result(
      MeleError ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createQueue_result(createQueue_result other) {
      if (other.isSetEx()) {
        this.ex = new MeleError(other.ex);
      }
    }

    public createQueue_result deepCopy() {
      return new createQueue_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public MeleError getEx() {
      return this.ex;
    }

    public createQueue_result setEx(MeleError ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((MeleError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createQueue_result)
        return this.equals((createQueue_result)that);
      return false;
    }

    public boolean equals(createQueue_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createQueue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createQueue_result typedOther = (createQueue_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createQueue_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createQueue_resultStandardSchemeFactory implements SchemeFactory {
      public createQueue_resultStandardScheme getScheme() {
        return new createQueue_resultStandardScheme();
      }
    }

    private static class createQueue_resultStandardScheme extends StandardScheme<createQueue_result> {

      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, createQueue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new MeleError();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, createQueue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createQueue_resultTupleSchemeFactory implements SchemeFactory {
      public createQueue_resultTupleScheme getScheme() {
        return new createQueue_resultTupleScheme();
      }
    }

    private static class createQueue_resultTupleScheme extends TupleScheme<createQueue_result> {

      @Override
      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, createQueue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, createQueue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new MeleError();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class removeQueue_args implements org.apache.mele.thirdparty.thrift_0_9_0.TBase<removeQueue_args, removeQueue_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct("removeQueue_args");

    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField NAME_FIELD_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField("name", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeQueue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeQueue_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.mele.thirdparty.thrift_0_9_0.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("name", org.apache.mele.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(removeQueue_args.class, metaDataMap);
    }

    public removeQueue_args() {
    }

    public removeQueue_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeQueue_args(removeQueue_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public removeQueue_args deepCopy() {
      return new removeQueue_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public removeQueue_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeQueue_args)
        return this.equals((removeQueue_args)that);
      return false;
    }

    public boolean equals(removeQueue_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeQueue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeQueue_args typedOther = (removeQueue_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeQueue_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeQueue_argsStandardSchemeFactory implements SchemeFactory {
      public removeQueue_argsStandardScheme getScheme() {
        return new removeQueue_argsStandardScheme();
      }
    }

    private static class removeQueue_argsStandardScheme extends StandardScheme<removeQueue_args> {

      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, removeQueue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, removeQueue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeQueue_argsTupleSchemeFactory implements SchemeFactory {
      public removeQueue_argsTupleScheme getScheme() {
        return new removeQueue_argsTupleScheme();
      }
    }

    private static class removeQueue_argsTupleScheme extends TupleScheme<removeQueue_args> {

      @Override
      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, removeQueue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, removeQueue_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class removeQueue_result implements org.apache.mele.thirdparty.thrift_0_9_0.TBase<removeQueue_result, removeQueue_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct("removeQueue_result");

    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeQueue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeQueue_resultTupleSchemeFactory());
    }

    public MeleError ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.mele.thirdparty.thrift_0_9_0.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.mele.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(removeQueue_result.class, metaDataMap);
    }

    public removeQueue_result() {
    }

    public removeQueue_result(
      MeleError ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeQueue_result(removeQueue_result other) {
      if (other.isSetEx()) {
        this.ex = new MeleError(other.ex);
      }
    }

    public removeQueue_result deepCopy() {
      return new removeQueue_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public MeleError getEx() {
      return this.ex;
    }

    public removeQueue_result setEx(MeleError ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((MeleError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeQueue_result)
        return this.equals((removeQueue_result)that);
      return false;
    }

    public boolean equals(removeQueue_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeQueue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeQueue_result typedOther = (removeQueue_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeQueue_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeQueue_resultStandardSchemeFactory implements SchemeFactory {
      public removeQueue_resultStandardScheme getScheme() {
        return new removeQueue_resultStandardScheme();
      }
    }

    private static class removeQueue_resultStandardScheme extends StandardScheme<removeQueue_result> {

      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, removeQueue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new MeleError();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, removeQueue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeQueue_resultTupleSchemeFactory implements SchemeFactory {
      public removeQueue_resultTupleScheme getScheme() {
        return new removeQueue_resultTupleScheme();
      }
    }

    private static class removeQueue_resultTupleScheme extends TupleScheme<removeQueue_result> {

      @Override
      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, removeQueue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, removeQueue_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new MeleError();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class queueList_args implements org.apache.mele.thirdparty.thrift_0_9_0.TBase<queueList_args, queueList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct("queueList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.mele.thirdparty.thrift_0_9_0.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(queueList_args.class, metaDataMap);
    }

    public queueList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueList_args(queueList_args other) {
    }

    public queueList_args deepCopy() {
      return new queueList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueList_args)
        return this.equals((queueList_args)that);
      return false;
    }

    public boolean equals(queueList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueList_args typedOther = (queueList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueList_argsStandardSchemeFactory implements SchemeFactory {
      public queueList_argsStandardScheme getScheme() {
        return new queueList_argsStandardScheme();
      }
    }

    private static class queueList_argsStandardScheme extends StandardScheme<queueList_args> {

      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, queueList_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, queueList_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueList_argsTupleSchemeFactory implements SchemeFactory {
      public queueList_argsTupleScheme getScheme() {
        return new queueList_argsTupleScheme();
      }
    }

    private static class queueList_argsTupleScheme extends TupleScheme<queueList_args> {

      @Override
      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, queueList_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, queueList_args struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queueList_result implements org.apache.mele.thirdparty.thrift_0_9_0.TBase<queueList_result, queueList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct STRUCT_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TStruct("queueList_result");

    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField SUCCESS_FIELD_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField("success", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.LIST, (short)0);
    private static final org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField EX_FIELD_DESC = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField("ex", org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueList_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public MeleError ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.mele.thirdparty.thrift_0_9_0.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("success", org.apache.mele.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.ListMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.LIST, 
              new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING))));
      tmpMap.put(_Fields.EX, new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData("ex", org.apache.mele.thirdparty.thrift_0_9_0.TFieldRequirementType.DEFAULT, 
          new org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldValueMetaData(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.mele.thirdparty.thrift_0_9_0.meta_data.FieldMetaData.addStructMetaDataMap(queueList_result.class, metaDataMap);
    }

    public queueList_result() {
    }

    public queueList_result(
      List<String> success,
      MeleError ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueList_result(queueList_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new MeleError(other.ex);
      }
    }

    public queueList_result deepCopy() {
      return new queueList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public queueList_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MeleError getEx() {
      return this.ex;
    }

    public queueList_result setEx(MeleError ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((MeleError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueList_result)
        return this.equals((queueList_result)that);
      return false;
    }

    public boolean equals(queueList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueList_result typedOther = (queueList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.mele.thirdparty.thrift_0_9_0.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(out)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TCompactProtocol(new org.apache.mele.thirdparty.thrift_0_9_0.transport.TIOStreamTransport(in)));
      } catch (org.apache.mele.thirdparty.thrift_0_9_0.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueList_resultStandardSchemeFactory implements SchemeFactory {
      public queueList_resultStandardScheme getScheme() {
        return new queueList_resultStandardScheme();
      }
    }

    private static class queueList_resultStandardScheme extends StandardScheme<queueList_result> {

      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol iprot, queueList_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        org.apache.mele.thirdparty.thrift_0_9_0.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.LIST) {
                {
                  org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    String _elem34; // required
                    _elem34 = iprot.readString();
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRUCT) {
                struct.ex = new MeleError();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol oprot, queueList_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING, struct.success.size()));
            for (String _iter35 : struct.success)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueList_resultTupleSchemeFactory implements SchemeFactory {
      public queueList_resultTupleScheme getScheme() {
        return new queueList_resultTupleScheme();
      }
    }

    private static class queueList_resultTupleScheme extends TupleScheme<queueList_result> {

      @Override
      public void write(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, queueList_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter36 : struct.success)
            {
              oprot.writeString(_iter36);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TProtocol prot, queueList_result struct) throws org.apache.mele.thirdparty.thrift_0_9_0.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList _list37 = new org.apache.mele.thirdparty.thrift_0_9_0.protocol.TList(org.apache.mele.thirdparty.thrift_0_9_0.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              String _elem39; // required
              _elem39 = iprot.readString();
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new MeleError();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
